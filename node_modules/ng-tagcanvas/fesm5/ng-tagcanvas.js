import { __awaiter, __generator } from 'tslib';
import { Component, Input, ElementRef, ViewChild, Output, EventEmitter, NgModule } from '@angular/core';
import { v4 } from 'uuid';
import 'jquery-tagcanvas/tagcanvas';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TagCanvasComponent = /** @class */ (function () {
    function TagCanvasComponent(elementRef) {
        this.elementRef = elementRef;
        this._instanceId = v4();
        this.canvasId = "canvas-" + this._instanceId;
        this.tagListId = "tags-" + this._instanceId;
        this.defaultOptions = {
            textFont: null,
            textColour: null,
            weightFrom: 'data-weight' // TODO: Hide this field from external modules
        };
        this.tagClick = new EventEmitter();
    }
    Object.defineProperty(TagCanvasComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        // TODO: Add stretch (boolean) input
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            this.start();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TagCanvasComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ canvasElement = /** @type {?} */ (this.canvas.nativeElement);
        canvasElement.width = Math.round(canvasElement.clientWidth);
        canvasElement.height = Math.round(canvasElement.clientHeight);
        var /** @type {?} */ style = window.getComputedStyle(this.elementRef.nativeElement);
        this.defaultOptions.textHeight = parseFloat(style['font-size']);
        this.start();
    };
    /**
     * @return {?}
     */
    TagCanvasComponent.prototype.start = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var mergedOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mergedOptions = Object.assign({}, this.defaultOptions, this._options);
                        return [4 /*yield*/, blinkEyes()];
                    case 1:
                        _a.sent();
                        TagCanvas.Start(this.canvasId, this.tagListId, mergedOptions);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    TagCanvasComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, blinkEyes()];
                    case 1:
                        _a.sent();
                        TagCanvas.Update(this.canvasId);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    TagCanvasComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ tagListState = JSON.stringify(this.tags.map(function (_a) {
            var text = _a.text, weight = _a.weight;
            return [text, weight];
        })); // TODO: Improve performance, use KeyValueDiffer/IterableDiffer
        if (this._previousTagListState !== tagListState) {
            this._previousTagListState = tagListState;
            this.update();
        }
    };
    /**
     * @return {?}
     */
    TagCanvasComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        TagCanvas.Delete(this.canvasId);
    };
    TagCanvasComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tag-canvas',
                    template: "<canvas #canvas id=\"{{ canvasId }}\"></canvas>\n<div id=\"{{ tagListId }}\" class=\"tag-container\">\n\t<a href=\"javascript:void(0)\" *ngFor=\"let tag of tags\"\n\t\t[attr.data-weight]=\"tag.weight\" (click)=\"tagClick.next(tag)\">{{ tag.text }}</a>\n</div>\n",
                    styles: [":host{display:block}canvas{display:block;width:100%;height:100%}.tag-container{display:none}.tag-container>a{font-family:inherit!important;color:inherit!important;font-size:inherit!important;font-weight:inherit!important}"]
                },] },
    ];
    /** @nocollapse */
    TagCanvasComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    TagCanvasComponent.propDecorators = {
        tags: [{ type: Input }],
        options: [{ type: Input }],
        tagClick: [{ type: Output }],
        canvas: [{ type: ViewChild, args: ['canvas',] }]
    };
    return TagCanvasComponent;
}());
/**
 * \@description Waits for change detection cycle
 * @return {?} Promise<void>
 */
function blinkEyes() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(function () { return resolve(); }); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TagCanvasModule = /** @class */ (function () {
    function TagCanvasModule() {
    }
    TagCanvasModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TagCanvasComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        TagCanvasComponent
                    ]
                },] },
    ];
    return TagCanvasModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Tag = /** @class */ (function () {
    function Tag(init) {
        Object.assign(this, init);
    }
    return Tag;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { TagCanvasModule, TagCanvasComponent, Tag };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,