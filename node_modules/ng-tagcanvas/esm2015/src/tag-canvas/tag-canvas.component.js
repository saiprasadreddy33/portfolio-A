/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ElementRef, ViewChild, Output, EventEmitter } from "@angular/core";
import { v4 as uuid } from 'uuid';
export class TagCanvasComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._instanceId = uuid();
        this.canvasId = `canvas-${this._instanceId}`;
        this.tagListId = `tags-${this._instanceId}`;
        this.defaultOptions = {
            textFont: null,
            textColour: null,
            weightFrom: 'data-weight' // TODO: Hide this field from external modules
        };
        this.tagClick = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this._options = value;
        this.start();
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        let /** @type {?} */ canvasElement = /** @type {?} */ (this.canvas.nativeElement);
        canvasElement.width = Math.round(canvasElement.clientWidth);
        canvasElement.height = Math.round(canvasElement.clientHeight);
        let /** @type {?} */ style = window.getComputedStyle(this.elementRef.nativeElement);
        this.defaultOptions.textHeight = parseFloat(style['font-size']);
        this.start();
    }
    /**
     * @return {?}
     */
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let /** @type {?} */ mergedOptions = Object.assign({}, this.defaultOptions, this._options);
            yield blinkEyes();
            TagCanvas.Start(this.canvasId, this.tagListId, mergedOptions);
        });
    }
    /**
     * @return {?}
     */
    update() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield blinkEyes();
            TagCanvas.Update(this.canvasId);
        });
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        let /** @type {?} */ tagListState = JSON.stringify(this.tags.map(({ text: text, weight: weight }) => [text, weight])); // TODO: Improve performance, use KeyValueDiffer/IterableDiffer
        if (this._previousTagListState !== tagListState) {
            this._previousTagListState = tagListState;
            this.update();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        TagCanvas.Delete(this.canvasId);
    }
}
TagCanvasComponent.decorators = [
    { type: Component, args: [{
                selector: 'tag-canvas',
                template: `<canvas #canvas id="{{ canvasId }}"></canvas>
<div id="{{ tagListId }}" class="tag-container">
	<a href="javascript:void(0)" *ngFor="let tag of tags"
		[attr.data-weight]="tag.weight" (click)="tagClick.next(tag)">{{ tag.text }}</a>
</div>
`,
                styles: [`:host{display:block}canvas{display:block;width:100%;height:100%}.tag-container{display:none}.tag-container>a{font-family:inherit!important;color:inherit!important;font-size:inherit!important;font-weight:inherit!important}`]
            },] },
];
/** @nocollapse */
TagCanvasComponent.ctorParameters = () => [
    { type: ElementRef }
];
TagCanvasComponent.propDecorators = {
    tags: [{ type: Input }],
    options: [{ type: Input }],
    tagClick: [{ type: Output }],
    canvas: [{ type: ViewChild, args: ['canvas',] }]
};
function TagCanvasComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    TagCanvasComponent.prototype._instanceId;
    /** @type {?} */
    TagCanvasComponent.prototype.canvasId;
    /** @type {?} */
    TagCanvasComponent.prototype.tagListId;
    /** @type {?} */
    TagCanvasComponent.prototype.defaultOptions;
    /** @type {?} */
    TagCanvasComponent.prototype.canvasWidth;
    /** @type {?} */
    TagCanvasComponent.prototype.canvasHeight;
    /** @type {?} */
    TagCanvasComponent.prototype._options;
    /** @type {?} */
    TagCanvasComponent.prototype.tags;
    /** @type {?} */
    TagCanvasComponent.prototype.tagClick;
    /** @type {?} */
    TagCanvasComponent.prototype.canvas;
    /** @type {?} */
    TagCanvasComponent.prototype._previousTagListState;
    /** @type {?} */
    TagCanvasComponent.prototype.elementRef;
}
/**
 * \@description Waits for change detection cycle
 * @return {?} Promise<void>
 */
function blinkEyes() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield new Promise(resolve => setTimeout(() => resolve()));
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWNhbnZhcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy10YWdjYW52YXMvIiwic291cmNlcyI6WyJzcmMvdGFnLWNhbnZhcy90YWctY2FudmFzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFXLEtBQUssRUFBYSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakksT0FBTyxFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFhbEMsTUFBTTs7OztJQXVDRixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZOzJCQXJDWCxJQUFJLEVBQUU7d0JBRWpCLFVBQVUsSUFBSSxDQUFDLFdBQVcsRUFBRTt5QkFDM0IsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFOzhCQUVIO1lBQ3hDLFFBQVEsRUFBRSxJQUFJO1lBQ2QsVUFBVSxFQUFFLElBQUk7WUFDaEIsVUFBVSxFQUFFLGFBQWE7U0FDNUI7d0JBdUI2QixJQUFJLFlBQVksRUFBRTtLQU8vQzs7Ozs7SUFsQkQsSUFDSSxPQUFPLENBQUMsS0FBdUI7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ2hCOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDeEI7Ozs7SUFZRCxlQUFlO1FBQ1gscUJBQUksYUFBYSxxQkFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWtDLENBQUEsQ0FBQztRQUNuRSxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVELGFBQWEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUQscUJBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDaEI7Ozs7SUFFSyxLQUFLOztZQUNQLHFCQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxRSxNQUFNLFNBQVMsRUFBRSxDQUFDO1lBQ2xCLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDOztLQUNqRTs7OztJQUVLLE1BQU07O1lBQ1IsTUFBTSxTQUFTLEVBQUUsQ0FBQztZQUNsQixTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7S0FDbkM7Ozs7SUFJRCxTQUFTO1FBQ0wscUJBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLElBQUksRUFBRSxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQixLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFlBQVksQ0FBQztZQUMxQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDakI7S0FDSjs7OztJQUVELFdBQVc7UUFDUCxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNuQzs7O1lBdkZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFOzs7OztDQUtiO2dCQUNHLE1BQU0sRUFBRSxDQUFDLCtOQUErTixDQUFDO2FBQzVPOzs7O1lBYjZELFVBQVU7OzttQkFnQ25FLEtBQUs7c0JBS0wsS0FBSzt1QkFVTCxNQUFNO3FCQUdOLFNBQVMsU0FBQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlEdkI7O1FBQ0ksTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0NBQzdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBEb0NoZWNrLCBJbnB1dCwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xyXG5pbXBvcnQgeyBUYWcgfSBmcm9tIFwiLi90YWdcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0YWctY2FudmFzJyxcclxuICAgIHRlbXBsYXRlOiBgPGNhbnZhcyAjY2FudmFzIGlkPVwie3sgY2FudmFzSWQgfX1cIj48L2NhbnZhcz5cclxuPGRpdiBpZD1cInt7IHRhZ0xpc3RJZCB9fVwiIGNsYXNzPVwidGFnLWNvbnRhaW5lclwiPlxyXG5cdDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiAqbmdGb3I9XCJsZXQgdGFnIG9mIHRhZ3NcIlxyXG5cdFx0W2F0dHIuZGF0YS13ZWlnaHRdPVwidGFnLndlaWdodFwiIChjbGljayk9XCJ0YWdDbGljay5uZXh0KHRhZylcIj57eyB0YWcudGV4dCB9fTwvYT5cclxuPC9kaXY+XHJcbmAsXHJcbiAgICBzdHlsZXM6IFtgOmhvc3R7ZGlzcGxheTpibG9ja31jYW52YXN7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS50YWctY29udGFpbmVye2Rpc3BsYXk6bm9uZX0udGFnLWNvbnRhaW5lcj5he2ZvbnQtZmFtaWx5OmluaGVyaXQhaW1wb3J0YW50O2NvbG9yOmluaGVyaXQhaW1wb3J0YW50O2ZvbnQtc2l6ZTppbmhlcml0IWltcG9ydGFudDtmb250LXdlaWdodDppbmhlcml0IWltcG9ydGFudH1gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFnQ2FudmFzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgT25EZXN0cm95IHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pbnN0YW5jZUlkID0gdXVpZCgpO1xyXG5cclxuICAgIHJlYWRvbmx5IGNhbnZhc0lkID0gYGNhbnZhcy0ke3RoaXMuX2luc3RhbmNlSWR9YDtcclxuICAgIHJlYWRvbmx5IHRhZ0xpc3RJZCA9IGB0YWdzLSR7dGhpcy5faW5zdGFuY2VJZH1gO1xyXG5cclxuICAgIHJlYWRvbmx5IGRlZmF1bHRPcHRpb25zOiBUYWdDYW52YXNPcHRpb25zID0ge1xyXG4gICAgICAgIHRleHRGb250OiBudWxsLFxyXG4gICAgICAgIHRleHRDb2xvdXI6IG51bGwsXHJcbiAgICAgICAgd2VpZ2h0RnJvbTogJ2RhdGEtd2VpZ2h0JyAvLyBUT0RPOiBIaWRlIHRoaXMgZmllbGQgZnJvbSBleHRlcm5hbCBtb2R1bGVzXHJcbiAgICB9O1xyXG5cclxuICAgIGNhbnZhc1dpZHRoOiBudW1iZXI7XHJcbiAgICBjYW52YXNIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIF9vcHRpb25zOiBUYWdDYW52YXNPcHRpb25zO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICB0YWdzOiBUYWdbXTtcclxuXHJcbiAgICAvLyBUT0RPOiBBZGQgc3RyZXRjaCAoYm9vbGVhbikgaW5wdXRcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IG9wdGlvbnModmFsdWU6IFRhZ0NhbnZhc09wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIEBPdXRwdXQoKVxyXG4gICAgdGFnQ2xpY2s6IEV2ZW50RW1pdHRlcjxUYWc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2NhbnZhcycpXHJcbiAgICBjYW52YXM6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgY2FudmFzRWxlbWVudCA9IHRoaXMuY2FudmFzLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICAgICAgY2FudmFzRWxlbWVudC53aWR0aCA9IE1hdGgucm91bmQoY2FudmFzRWxlbWVudC5jbGllbnRXaWR0aCk7XHJcbiAgICAgICAgY2FudmFzRWxlbWVudC5oZWlnaHQgPSBNYXRoLnJvdW5kKGNhbnZhc0VsZW1lbnQuY2xpZW50SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgbGV0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMudGV4dEhlaWdodCA9IHBhcnNlRmxvYXQoc3R5bGVbJ2ZvbnQtc2l6ZSddKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBhc3luYyBzdGFydCgpIHtcclxuICAgICAgICBsZXQgbWVyZ2VkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMsIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgICAgIGF3YWl0IGJsaW5rRXllcygpO1xyXG4gICAgICAgIFRhZ0NhbnZhcy5TdGFydCh0aGlzLmNhbnZhc0lkLCB0aGlzLnRhZ0xpc3RJZCwgbWVyZ2VkT3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBkYXRlKCkge1xyXG4gICAgICAgIGF3YWl0IGJsaW5rRXllcygpO1xyXG4gICAgICAgIFRhZ0NhbnZhcy5VcGRhdGUodGhpcy5jYW52YXNJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcHJldmlvdXNUYWdMaXN0U3RhdGU6IHN0cmluZztcclxuXHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRhZ0xpc3RTdGF0ZSA9IEpTT04uc3RyaW5naWZ5KHRoaXMudGFncy5tYXAoKHsgdGV4dDogdGV4dCwgd2VpZ2h0OiB3ZWlnaHQgfSkgPT4gWyB0ZXh0LCB3ZWlnaHQgXSkpOyAvLyBUT0RPOiBJbXByb3ZlIHBlcmZvcm1hbmNlLCB1c2UgS2V5VmFsdWVEaWZmZXIvSXRlcmFibGVEaWZmZXJcclxuICAgICAgICBpZiAodGhpcy5fcHJldmlvdXNUYWdMaXN0U3RhdGUgIT09IHRhZ0xpc3RTdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c1RhZ0xpc3RTdGF0ZSA9IHRhZ0xpc3RTdGF0ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgVGFnQ2FudmFzLkRlbGV0ZSh0aGlzLmNhbnZhc0lkKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gICAgQGRlc2NyaXB0aW9uIFdhaXRzIGZvciBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlXHJcbiAgICBAcmV0dXJucyBQcm9taXNlPHZvaWQ+XHJcbiovXHJcbmFzeW5jIGZ1bmN0aW9uIGJsaW5rRXllcygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCkpKTtcclxufVxyXG4iXX0=