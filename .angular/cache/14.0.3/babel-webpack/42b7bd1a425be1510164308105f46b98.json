{"ast":null,"code":"import { ScriptStore } from '../constants';\nimport * as i0 from \"@angular/core\";\nexport let DynamicScriptService = /*#__PURE__*/(() => {\n  class DynamicScriptService {\n    constructor() {\n      this.scripts = {};\n      ScriptStore.forEach(script => {\n        this.scripts[script.name] = {\n          loaded: false,\n          src: script.src\n        };\n      });\n    }\n\n    load(...scripts) {\n      var promises = [];\n      scripts.forEach(script => promises.push(this.loadScript(script)));\n      return Promise.all(promises);\n    }\n\n    loadScript(name) {\n      return new Promise((resolve, reject) => {\n        //resolve if already loaded\n        if (this.scripts[name].loaded) {\n          resolve({\n            script: name,\n            loaded: true,\n            status: 'Already Loaded'\n          });\n        } else {\n          //load script\n          let script = document.createElement('script');\n          script.type = 'text/javascript';\n          script.src = this.scripts[name].src;\n\n          if (script.readyState) {\n            //IE\n            script.onreadystatechange = () => {\n              if (script.readyState === 'loaded' || script.readyState === 'complete') {\n                script.onreadystatechange = null;\n                this.scripts[name].loaded = true;\n                resolve({\n                  script: name,\n                  loaded: true,\n                  status: 'Loaded'\n                });\n              }\n            };\n          } else {\n            //Others\n            script.onload = () => {\n              this.scripts[name].loaded = true;\n              resolve({\n                script: name,\n                loaded: true,\n                status: 'Loaded'\n              });\n            };\n          }\n\n          script.onerror = error => resolve({\n            script: name,\n            loaded: false,\n            status: 'Loaded'\n          });\n\n          document.getElementsByTagName('head')[0].appendChild(script);\n        }\n      });\n    }\n\n  }\n\n  DynamicScriptService.ɵfac = function DynamicScriptService_Factory(t) {\n    return new (t || DynamicScriptService)();\n  };\n\n  DynamicScriptService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DynamicScriptService,\n    factory: DynamicScriptService.ɵfac,\n    providedIn: 'root'\n  });\n  return DynamicScriptService;\n})();","map":null,"metadata":{},"sourceType":"module"}