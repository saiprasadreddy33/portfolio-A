{"ast":null,"code":"import createDelimiters from './createDelimiters';\nimport getText from './getText';\nimport processElements from './processElements';\nimport traverseDOM from './traverseDOM';\nexport default class {\n  constructor(el, options = {}) {\n    // build array of target elements\n    this.elements = [];\n\n    if (typeof el == 'string') {\n      this.elements = Array.from(document.querySelectorAll(el));\n    } else {\n      this.elements = [el];\n    } // set up defaults\n\n\n    this.opts = {\n      returnGenerated: options.returnGenerated || true,\n      delimiter: options.delimiter || 'word',\n      tag: options.tag || 'span',\n      search: options.search || false,\n      customClass: options.customClass || '',\n      generateIndexID: options.generateIndexID || false,\n      generateValueClass: options.generateValueClass || false,\n      // stripHTMLTags: options.stripHTMLTags || false, // not yet supported\n      aria: options.hasOwnProperty('aria') ? options.aria : true,\n      debug: options.debug || false,\n      // new options for vanilla version\n      name: options.name || 'blast'\n    }; // set up Element\n\n    Element = {\n      /* The index of each wrapper element generated by blasting. */\n      blastedIndex: 0,\n\n      /* Whether we're just entering this node. */\n      nodeBeginning: false,\n\n      /* Keep track of the elements generated by Blast so that they can (optionally) be pushed onto the jQuery call stack. */\n      wrappers: Element.wrappers || []\n    }; // create delimiters\n\n    const processedDelimiters = this.createDelimiters();\n    this.opts.processedDelimiter = processedDelimiters.delimiter;\n    this.opts.processedDelimiterRegex = processedDelimiters.delimiterRegex; // initial element processing\n\n    this.processedElements = this.processElements(); // DOM traversal\n\n    if (this.opts.debug) console.time('blast');\n    this.processedElements.map(elem => {\n      traverseDOM(elem, this.opts);\n    });\n    if (this.opts.debug) console.timeEnd('blast');\n  }\n\n  createDelimiters(opts = null) {\n    return createDelimiters(opts || this.opts);\n  }\n\n  getText(el) {\n    return getText(el);\n  }\n\n  processElements(elements = null, opts = null) {\n    return processElements(elements || this.elements, opts || this.opts);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}