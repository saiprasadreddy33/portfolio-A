{"ast":null,"code":"export const characterRanges = {\n  latinPunctuation: \"–—′’'“″„\\\"(«.…¡¿′’'”″“\\\")».…!?\",\n  latinLetters: \"\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00C0-\\\\u017F\\\\u0100-\\\\u01FF\\\\u0180-\\\\u027F\"\n};\nexport const Reg = {\n  /* If the abbreviations RegEx is missing a title abbreviation that you find yourself needing to often escape manually, tweet me: @Shapiro. */\n  abbreviations: new RegExp(\"[^\" + characterRanges.latinLetters + \"](e\\\\.g\\\\.)|(i\\\\.e\\\\.)|(mr\\\\.)|(mrs\\\\.)|(ms\\\\.)|(dr\\\\.)|(prof\\\\.)|(esq\\\\.)|(sr\\\\.)|(jr\\\\.)[^\" + characterRanges.latinLetters + \"]\", \"ig\"),\n  innerWordPeriod: new RegExp(\"[\" + characterRanges.latinLetters + \"]\\.[\" + characterRanges.latinLetters + \"]\", \"ig\"),\n  onlyContainsPunctuation: new RegExp(\"[^\" + characterRanges.latinPunctuation + \"]\"),\n  adjoinedPunctuation: new RegExp(\"^[\" + characterRanges.latinPunctuation + \"]+|[\" + characterRanges.latinPunctuation + \"]+$\", \"g\"),\n  skippedElements: /(script|style|select|textarea)/i,\n  hasPluginClass: new RegExp(\"(^| )\" + 'blast' + \"( |$)\", \"gi\")\n};\n/* Escape likely false-positives of sentence-final periods. Escaping is performed by wrapping a character's ASCII equivalent in double curly brackets,\n   which is then reversed (deencodcoded) after delimiting. */\n\nexport function encodePunctuation(text) {\n  return text\n  /* Escape the following Latin abbreviations and English titles: e.g., i.e., Mr., Mrs., Ms., Dr., Prof., Esq., Sr., and Jr. */\n  .replace(exports.Reg.abbreviations, function (match) {\n    return match.replace(/\\./g, \"{{46}}\");\n  })\n  /* Escape inner-word (non-space-delimited) periods. For example, the period inside \"Blast.js\". */\n  .replace(exports.Reg.innerWordPeriod, function (match) {\n    return match.replace(/\\./g, \"{{46}}\");\n  });\n}\n/* Used to decode both the output of encodePunctuation() and punctuation that has been manually escaped by users. */\n\nexport function decodePunctuation(text) {\n  return text.replace(/{{(\\d{1,3})}}/g, function (fullMatch, subMatch) {\n    return String.fromCharCode(subMatch);\n  });\n}","map":{"version":3,"names":["characterRanges","latinPunctuation","latinLetters","Reg","abbreviations","RegExp","innerWordPeriod","onlyContainsPunctuation","adjoinedPunctuation","skippedElements","hasPluginClass","encodePunctuation","text","replace","exports","match","decodePunctuation","fullMatch","subMatch","String","fromCharCode"],"sources":["C:/Users/saiprasad/Desktop/portfolio-angular-master/node_modules/blast-vanilla/src/utils.js"],"sourcesContent":["export const characterRanges = {\n    latinPunctuation: \"–—′’'“″„\\\"(«.…¡¿′’'”″“\\\")».…!?\",\n    latinLetters: \"\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00C0-\\\\u017F\\\\u0100-\\\\u01FF\\\\u0180-\\\\u027F\"\n}\nexport const Reg = {\n    /* If the abbreviations RegEx is missing a title abbreviation that you find yourself needing to often escape manually, tweet me: @Shapiro. */\n    abbreviations: new RegExp(\"[^\" + characterRanges.latinLetters + \"](e\\\\.g\\\\.)|(i\\\\.e\\\\.)|(mr\\\\.)|(mrs\\\\.)|(ms\\\\.)|(dr\\\\.)|(prof\\\\.)|(esq\\\\.)|(sr\\\\.)|(jr\\\\.)[^\" + characterRanges.latinLetters + \"]\", \"ig\"),\n    innerWordPeriod: new RegExp(\"[\" + characterRanges.latinLetters + \"]\\.[\" + characterRanges.latinLetters + \"]\", \"ig\"),\n    onlyContainsPunctuation: new RegExp(\"[^\" + characterRanges.latinPunctuation + \"]\"),\n    adjoinedPunctuation: new RegExp(\"^[\" + characterRanges.latinPunctuation + \"]+|[\" + characterRanges.latinPunctuation + \"]+$\", \"g\"),\n    skippedElements: /(script|style|select|textarea)/i,\n    hasPluginClass: new RegExp(\"(^| )\" + 'blast' + \"( |$)\", \"gi\")\n}\n\n/* Escape likely false-positives of sentence-final periods. Escaping is performed by wrapping a character's ASCII equivalent in double curly brackets,\n   which is then reversed (deencodcoded) after delimiting. */\nexport function encodePunctuation (text) {\n    return text\n            /* Escape the following Latin abbreviations and English titles: e.g., i.e., Mr., Mrs., Ms., Dr., Prof., Esq., Sr., and Jr. */\n            .replace(exports.Reg.abbreviations, function(match) {\n                return match.replace(/\\./g, \"{{46}}\");\n            })\n            /* Escape inner-word (non-space-delimited) periods. For example, the period inside \"Blast.js\". */\n            .replace(exports.Reg.innerWordPeriod, function(match) {\n                return match.replace(/\\./g, \"{{46}}\");\n            });\n}\n\n/* Used to decode both the output of encodePunctuation() and punctuation that has been manually escaped by users. */\nexport function decodePunctuation (text) {\n    return text.replace(/{{(\\d{1,3})}}/g, function(fullMatch, subMatch) {\n        return String.fromCharCode(subMatch);\n    });\n}\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG;EAC3BC,gBAAgB,EAAE,gCADS;EAE3BC,YAAY,EAAE;AAFa,CAAxB;AAIP,OAAO,MAAMC,GAAG,GAAG;EACf;EACAC,aAAa,EAAE,IAAIC,MAAJ,CAAW,OAAOL,eAAe,CAACE,YAAvB,GAAsC,8FAAtC,GAAuIF,eAAe,CAACE,YAAvJ,GAAsK,GAAjL,EAAsL,IAAtL,CAFA;EAGfI,eAAe,EAAE,IAAID,MAAJ,CAAW,MAAML,eAAe,CAACE,YAAtB,GAAqC,MAArC,GAA8CF,eAAe,CAACE,YAA9D,GAA6E,GAAxF,EAA6F,IAA7F,CAHF;EAIfK,uBAAuB,EAAE,IAAIF,MAAJ,CAAW,OAAOL,eAAe,CAACC,gBAAvB,GAA0C,GAArD,CAJV;EAKfO,mBAAmB,EAAE,IAAIH,MAAJ,CAAW,OAAOL,eAAe,CAACC,gBAAvB,GAA0C,MAA1C,GAAmDD,eAAe,CAACC,gBAAnE,GAAsF,KAAjG,EAAwG,GAAxG,CALN;EAMfQ,eAAe,EAAE,iCANF;EAOfC,cAAc,EAAE,IAAIL,MAAJ,CAAW,UAAU,OAAV,GAAoB,OAA/B,EAAwC,IAAxC;AAPD,CAAZ;AAUP;AACA;;AACA,OAAO,SAASM,iBAAT,CAA4BC,IAA5B,EAAkC;EACrC,OAAOA;EACC;EADG,CAEFC,OAFF,CAEUC,OAAO,CAACX,GAAR,CAAYC,aAFtB,EAEqC,UAASW,KAAT,EAAgB;IAChD,OAAOA,KAAK,CAACF,OAAN,CAAc,KAAd,EAAqB,QAArB,CAAP;EACH,CAJF;EAKC;EALD,CAMEA,OANF,CAMUC,OAAO,CAACX,GAAR,CAAYG,eANtB,EAMuC,UAASS,KAAT,EAAgB;IAClD,OAAOA,KAAK,CAACF,OAAN,CAAc,KAAd,EAAqB,QAArB,CAAP;EACH,CARF,CAAP;AASH;AAED;;AACA,OAAO,SAASG,iBAAT,CAA4BJ,IAA5B,EAAkC;EACrC,OAAOA,IAAI,CAACC,OAAL,CAAa,gBAAb,EAA+B,UAASI,SAAT,EAAoBC,QAApB,EAA8B;IAChE,OAAOC,MAAM,CAACC,YAAP,CAAoBF,QAApB,CAAP;EACH,CAFM,CAAP;AAGH"},"metadata":{},"sourceType":"module"}