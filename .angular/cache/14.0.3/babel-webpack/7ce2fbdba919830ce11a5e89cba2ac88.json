{"ast":null,"code":"import getText from './getText';\nexport default ((elements, opts) => {\n  return elements.map(elem => {\n    // get text contents\n    const text = getText(elem); // prep wrapping tag\n\n    let tag = opts.tag || 'span';\n    /* If the browser throws an error for the provided element type (browers whitelist the letters and types of the elements they accept), fall back to using \"span\". */\n\n    try {\n      document.createElement(tag);\n    } catch (error) {\n      tag = \"span\";\n      if (opts.debug) console.log(NAME + \": Invalid tag supplied. Defaulting to span.\");\n    } // ###\n    // TODO: Reimplement reversing?\n    // /* Unless a consecutive opts.search is being performed, an element's existing Blast call is reversed before proceeding. */\n    // if ($this.data(NAME) !== undefined && ($this.data(NAME) !== \"search\" || opts.search === false)) {\n    //     reverse(el, opts);\n    //\n    //     if (opts.debug) console.log(NAME + \": Removed element's existing Blast call.\");\n    // }\n    // ###\n    // ###\n    // TODO: Reimplement?\n\n    /* Store the current delimiter type so that it can be compared against on subsequent calls (see above). */\n    //$this.data(NAME, opts.search !== false ? \"search\" : opts.delimiter);\n    // ###\n    // set up aria attribute\n\n\n    if (opts.aria) {\n      elem.setAttribute(\"aria-label\", text);\n    } // ###\n    // TODO: Reimplement tag stripping?\n    // ###\n\n    /* For reference purposes when reversing Blast, assign the target element a root class. */\n\n\n    elem.classList.add('blast-root'); // ###\n    // TODO: Reimplement reversal?\n\n    /* If false is passed in as the first parameter, reverse Blast. */\n    // } else if (options === false && $this.data(NAME) !== undefined) {\n    //     reverse($this, opts);\n    // }\n    // ###\n    // ###\n    // TODO: Reimplement?\n\n    /**************\n       Debugging\n    **************/\n\n    /* Output the full string of each wrapper element and color alternate the wrappers. This is in addition to the performance timing that has already been outputted. */\n    // if (opts.debug) {\n    //     $.each(Element.wrappers, function(index, element) {\n    //         console.log(NAME + \" [\" + opts.delimiter + \"] \" + this.outerHTML);\n    //         this.style.backgroundColor = index % 2 ? \"#f12185\" : \"#075d9a\";\n    //     })\n    // }\n    // ###\n\n    return elem;\n  });\n});","map":{"version":3,"names":["getText","elements","opts","map","elem","text","tag","document","createElement","error","debug","console","log","NAME","aria","setAttribute","classList","add"],"sources":["C:/Users/saiprasad/Desktop/portfolio-angular-master/node_modules/blast-vanilla/src/processElements.js"],"sourcesContent":["import getText from './getText'\n\nexport default (elements, opts) => {\n    return elements.map(elem => {\n\n        // get text contents\n        const text = getText(elem)\n\n        // prep wrapping tag\n        let tag = opts.tag || 'span'\n        /* If the browser throws an error for the provided element type (browers whitelist the letters and types of the elements they accept), fall back to using \"span\". */\n        try {\n            document.createElement(tag);\n        } catch (error) {\n            tag = \"span\";\n\n            if (opts.debug) console.log(NAME + \": Invalid tag supplied. Defaulting to span.\");\n        }\n\n        // ###\n        // TODO: Reimplement reversing?\n        // /* Unless a consecutive opts.search is being performed, an element's existing Blast call is reversed before proceeding. */\n        // if ($this.data(NAME) !== undefined && ($this.data(NAME) !== \"search\" || opts.search === false)) {\n        //     reverse(el, opts);\n        //\n        //     if (opts.debug) console.log(NAME + \": Removed element's existing Blast call.\");\n        // }\n        // ###\n\n        // ###\n        // TODO: Reimplement?\n        /* Store the current delimiter type so that it can be compared against on subsequent calls (see above). */\n        //$this.data(NAME, opts.search !== false ? \"search\" : opts.delimiter);\n        // ###\n\n        // set up aria attribute\n        if (opts.aria) {\n            elem.setAttribute(\"aria-label\", text)\n        }\n\n        // ###\n        // TODO: Reimplement tag stripping?\n        // ###\n\n        /* For reference purposes when reversing Blast, assign the target element a root class. */\n        elem.classList.add('blast-root');\n\n        // ###\n        // TODO: Reimplement reversal?\n        /* If false is passed in as the first parameter, reverse Blast. */\n        // } else if (options === false && $this.data(NAME) !== undefined) {\n        //     reverse($this, opts);\n        // }\n        // ###\n\n        // ###\n        // TODO: Reimplement?\n        /**************\n           Debugging\n        **************/\n\n        /* Output the full string of each wrapper element and color alternate the wrappers. This is in addition to the performance timing that has already been outputted. */\n        // if (opts.debug) {\n        //     $.each(Element.wrappers, function(index, element) {\n        //         console.log(NAME + \" [\" + opts.delimiter + \"] \" + this.outerHTML);\n        //         this.style.backgroundColor = index % 2 ? \"#f12185\" : \"#075d9a\";\n        //     })\n        // }\n        // ###\n\n        return elem\n    })\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,gBAAe,CAACC,QAAD,EAAWC,IAAX,KAAoB;EAC/B,OAAOD,QAAQ,CAACE,GAAT,CAAaC,IAAI,IAAI;IAExB;IACA,MAAMC,IAAI,GAAGL,OAAO,CAACI,IAAD,CAApB,CAHwB,CAKxB;;IACA,IAAIE,GAAG,GAAGJ,IAAI,CAACI,GAAL,IAAY,MAAtB;IACA;;IACA,IAAI;MACAC,QAAQ,CAACC,aAAT,CAAuBF,GAAvB;IACH,CAFD,CAEE,OAAOG,KAAP,EAAc;MACZH,GAAG,GAAG,MAAN;MAEA,IAAIJ,IAAI,CAACQ,KAAT,EAAgBC,OAAO,CAACC,GAAR,CAAYC,IAAI,GAAG,6CAAnB;IACnB,CAduB,CAgBxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;;IACA;IACA;IACA;IAEA;;;IACA,IAAIX,IAAI,CAACY,IAAT,EAAe;MACXV,IAAI,CAACW,YAAL,CAAkB,YAAlB,EAAgCV,IAAhC;IACH,CAnCuB,CAqCxB;IACA;IACA;;IAEA;;;IACAD,IAAI,CAACY,SAAL,CAAeC,GAAf,CAAmB,YAAnB,EA1CwB,CA4CxB;IACA;;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;;IACA;AACR;AACA;;IAEQ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,OAAOb,IAAP;EACH,CApEM,CAAP;AAqEH,CAtED"},"metadata":{},"sourceType":"module"}